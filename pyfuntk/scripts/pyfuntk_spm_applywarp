#! /usr/bin/env python
##########################################################################
# NSAp - Copyright (C) CEA, 2013 - 2019
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################

# System import
from __future__ import print_function
import argparse
import os
import shutil
from datetime import datetime
import json
from pprint import pprint
import textwrap
from argparse import RawTextHelpFormatter

# Bredala import
try:
    import bredala
    bredala.USE_PROFILER = False
    bredala.register("pyfuntk.stats.utils",
                     names=["ungzip_file", "ungzip_list_of_files"])
    bredala.register("pyfuntk.preproc.registration",
                     names=["spm_applywarp"])
except:
    pass

# Package import
from pyfuntk import __version__ as version
from pyfuntk import DEFAULT_SPM_STANDALONE_PATH
from pyfuntk.stats.utils import ungzip_file
from pyfuntk.stats.utils import  ungzip_list_of_files
from pyfuntk.preproc.registration import spm_applywarp


# Parameters to keep trace
__hopla__ = ["runtime", "inputs", "outputs"]


# Script documentation
DOC = """
SPM apply warp

Command:

python $HOME/git/pyfuntk/pyfuntk/scripts/pyfuntk_spm_applywarp \
    -V 2 \
    -o /tmp/spm \
    -m /neurospin/radiomics_pub/metastasis/derivatives/new_version/06.segmentation_MNI_part1/MNI152/MNI152_seg.nii.gz \
    -r /neurospin/radiomics_pub/metastasis/derivatives/05.normalize.part1/sub-127741314294/ses-V01/sub-127741314294_ses-V01_acq-fslflirt_brain.nii.gz \
    -d /neurospin/radiomics_pub/metastasis/derivatives/05.normalize.part2/sub-127741314294/ses-V01/sub-127741314294_ses-V01_acq-spmnormalize_field.nii.gz

"""


def is_file(filearg):
    """ Type for argparse - checks that file exists but does not open.
    """
    if not os.path.isfile(filearg):
        raise argparse.ArgumentError(
            "The file '{0}' does not exist!".format(filearg))
    return filearg


def is_directory(dirarg):
    """ Type for argparse - checks that directory exists.
    """
    if not os.path.isdir(dirarg):
        raise argparse.ArgumentError(
            "The directory '{0}' does not exist!".format(dirarg))
    return dirarg

def get_cmd_line_args():
    """
    Create a command line argument parser and return a dict mapping
    <argument name> -> <argument value>.
    """
    parser = argparse.ArgumentParser(
        prog="pyconnectome_register",
        description=textwrap.dedent(DOC),
        formatter_class=RawTextHelpFormatter)

    # Required arguments
    required = parser.add_argument_group("required arguments")
    required.add_argument(
        "-m", "--moving-file",
        required=True, type=is_file,
        help="the file to normalize.")
    required.add_argument(
        "-r", "--reference-file",
        required=True, type=is_file,
        help="the file defing the target space.")
    required.add_argument(
        "-d", "--deformation-file",
        required=True, type=is_file,
        help="the deformation field.")
    parser.add_argument(
        "-o", "--outdir",
        required=True, metavar="<path>", type=is_directory,
        help="the analysis output directory.")

    # Optional arguments
    parser.add_argument(
        "-V", "--verbose",
        type=int, choices=[0, 1, 2], default=0,
        help="increase the verbosity level: 0 silent, [1, 2] verbose.")
    parser.add_argument(
        "-S", "--spmbin",
        type=is_file,
        help="path to the SPM standalone file.")

    # Create a dict of arguments to pass to the 'main' function
    args = parser.parse_args()
    kwargs = vars(args)
    verbose = kwargs.pop("verbose")
    if kwargs["spmbin"] is None:
        kwargs["spmbin"] = DEFAULT_SPM_STANDALONE_PATH

    return kwargs, verbose


"""
Parse the command line.
"""
inputs, verbose = get_cmd_line_args()
runtime = {
    "tool": "pyfuntk_spm_applywarp",
    "timestamp": datetime.now().isoformat(),
    "tool_version": version}
outputs = {}
if verbose > 0:
    pprint("[info] Starting SPM applywarp ...")
    pprint("[info] Runtime:")
    pprint(runtime)
    pprint("[info] Inputs:")
    pprint(inputs)


"""
Step 1: UnZip Image Files
"""
dataset = {}
for name, pre, path in [("moving", "u", inputs["moving_file"]),
                   ("ref", "u", inputs["reference_file"]),
                   ("field", "y_", inputs["deformation_file"])]:
    dataset[name] = ungzip_file(
        fname=path,
        prefix=pre,
        outdir=inputs["outdir"])


"""
Step 2: Apply deformation field
"""
normalize_file = spm_applywarp(
    moving_file=dataset["moving"],
    reference_file=dataset["ref"],
    deformation_file=dataset["field"],
    outdir=inputs["outdir"],
    interp=0,
    inverse=True,
    spmbin=inputs["spmbin"])
outputs["normalize_file"] = normalize_file


"""
Step3: Clean
"""
for key, path in dataset.items():
    if os.path.dirname(path) == inputs["outdir"]:
        os.remove(path)


"""
Update the outputs and save them and the inputs in a 'logs' directory.
"""
logdir = os.path.join(inputs["outdir"], "logs")
if not os.path.isdir(logdir):
    os.mkdir(logdir)
for name, final_struct in [("inputs", inputs), ("outputs", outputs),
                           ("runtime", runtime)]:
    log_file = os.path.join(logdir, "{0}.json".format(name))
    with open(log_file, "wt") as open_file:
        json.dump(final_struct, open_file, sort_keys=True, check_circular=True,
                  indent=4)
if verbose > 1:
    print("[info] Outputs:")
    pprint(outputs)
