#! /usr/bin/env python
##########################################################################
# NSAp - Copyright (C) CEA, 2013 - 2016
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################

# System import
from __future__ import print_function
import argparse
import os
import shutil
from datetime import datetime
import json
from pprint import pprint

# Bredala import
try:
    import bredala
    bredala.USE_PROFILER = False
    bredala.register("pyfuntk.stats.model",
                     names=["spm_second_level"])
    bredala.register("pyfuntk.stats.utils",
                     names=["get_onsets", "normalize_array",
                            "ungzip_list_of_files", "ungzip_file",
                            "erode_mask"])
except:
    pass

# Package import
from pyfuntk import __version__ as version
from pyfuntk import DEFAULT_SPM_STANDALONE_PATH
from pyfuntk.stats.model import spm_second_level
from pyfuntk.stats.utils import ungzip_list_of_files
from pyfuntk.stats.utils import ungzip_file


# Parameters to keep trace
__hopla__ = ["runtime", "inputs", "outputs"]


# Script documentation
doc = """
SPM Second Level
~~~~~~~~~~~~~~~~

Perform a functional SPM first second analysis.

Steps:

1: UnZip Image Files.
2: SPM Second Level Analysis.
"""


def is_file(filearg):
    """ Type for argparse - checks that file exists but does not open.
    """
    if not os.path.isfile(filearg):
        raise argparse.ArgumentError(
            "The file '{0}' does not exist!".format(filearg))
    return filearg


def is_directory(dirarg):
    """ Type for argparse - checks that directory exists.
    """
    if not os.path.isdir(dirarg):
        raise argparse.ArgumentError(
            "The directory '{0}' does not exist!".format(dirarg))
    return dirarg


parser = argparse.ArgumentParser(description=doc)
parser.add_argument(
    "-v", "--verbose", dest="verbose", type=int, choices=[0, 1, 2], default=0,
    help="increase the verbosity level: 0 silent, [1, 2] verbose.")
parser.add_argument(
    "-e", "--erase", dest="erase", action="store_true",
    help="if activated, clean the result folder if already created.")
parser.add_argument(
    "-o", "--outdir", dest="outdir", metavar="PATH", type=is_directory,
    help="the analysis output directory.")
parser.add_argument(
    "-d", "--spmbin", dest="spmbin", type=is_file,
    help="path to the SPM standalone file.")
parser.add_argument(
    "-s", "--sid", dest="sid", required=True,
    help="the subject identifier.")
# parser.add_argument(
#     "-m", "--maskfile", dest="maskfile", type=is_file, required=True,
#     help="binary mask to constrain the model estimation.")
parser.add_argument(
    "-c", "--contrasts", dest="contrasts", type=is_file, required=True,
    help="a JSON file that contains a list of contrasts with each contrast "
         "being a tuple of the form: ('name', 'stat', [condition list], "
         "[weight list]).")
parser.add_argument(
    "-i", "--firstlevel-con-files", dest="firstlevel_con_files",
    type=is_file, nargs="+",
    required=True, help="the 4D functional contrast volumes.")
args = parser.parse_args()
inputs = vars(args)
verbose = inputs.pop("verbose")


"""
First construct the subject working directory and check its existance on
the file system.
"""
tool = "pyfuntk_spm_secondlevel"
timestamp = datetime.now().isoformat()
tool_version = version
spmbin = args.spmbin or DEFAULT_SPM_STANDALONE_PATH
params = locals()
runtime = dict([(name, params[name])
               for name in ("tool", "tool_version", "spmbin", "timestamp")])
outputs = None
subjdir = os.path.join(inputs["outdir"], inputs["sid"])
if inputs["erase"] and os.path.isdir(subjdir):
    shutil.rmtree(subjdir)
if not os.path.isdir(subjdir):
    os.mkdir(subjdir)


"""
Step 1: UnZip Image Files
"""
firstlevel_con_files = ungzip_list_of_files(
    files=inputs["firstlevel_con_files"],
    prefix="u",
    outdir=subjdir)
# maskfile = ungzip_file(
#     fname=inputs["maskfile"],
#     prefix="u",
#     outdir=subjdir)


"""
Step 2: SPM Second Level Analysis
"""
with open(inputs["contrasts"], "rt") as open_file:
    contrasts = json.load(open_file)
(RPVimage, beta_images, mask_image, residual_image, spm_mat_file, design_snap,
 con_images, spmT_images, ess_images, spmF_images) = spm_second_level(
    firstlevel_con_files=firstlevel_con_files,
    contrasts=contrasts,
    mask_image=None,
    outdir=subjdir,
    design="T",
    spmbin=spmbin)


"""
Update the outputs and save them and the inputs in a 'logs' directory.
"""
logdir = os.path.join(subjdir, "logs")
if not os.path.isdir(logdir):
    os.mkdir(logdir)
params = locals()
outputs = dict([(name, params[name])
               for name in ("RPVimage", "beta_images", "mask_image",
                            "residual_image", "spm_mat_file",
                            "design_snap", "con_images", "spmT_images",
                            "ess_images", "spmF_images")])
for name, final_struct in [("inputs", inputs), ("outputs", outputs),
                           ("runtime", runtime)]:
    log_file = os.path.join(logdir, "{0}.json".format(name))
    with open(log_file, "wt") as open_file:
        json.dump(final_struct, open_file, sort_keys=True, check_circular=True,
                  indent=4)
if verbose > 1:
    print("[info] Outputs:")
    pprint(outputs)
